package com.capstone.application.service.impl;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.log;

import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.capstone.application.dto.appointmentDto;
import com.capstone.application.model.Appointment;
import com.capstone.application.repository.AppointmentRepository;
import com.capstone.application.service.AppointmentService;

import lombok.extern.log4j.Log4j2;



@Service
@Log4j2
public class AppointmentServiceImpl implements AppointmentService{
	
	@Autowired
	private ModelMapper modelmapper;
	
	private AppointmentRepository appointmentRepository;

	public AppointmentServiceImpl(AppointmentRepository appointmentRepository) {
		super();
		this.appointmentRepository = appointmentRepository;
	}

	@Override
	public Optional<Appointment> findByAppointmentById(Integer patientId) {
		// TODO Auto-generated method stub
		try {
		return appointmentRepository.findById(patientId);
		}
		catch(Exception e)
		{
			log.error(e.getMessage());
			throw new UpdateFailedException("Unable to fetch record");
		}
	}

	@Override
	public List<Appointment> findByAppointmentByPEmail(String physicianEmail,String acceptance) {
		// TODO Auto-generated method stub
		try {
		return appointmentRepository.findByEmail(physicianEmail,acceptance);
		}
		catch(Exception e)
		{
			log.error(e.getMessage());
			throw new UpdateFailedException("Unable to fetch record");
		}
	}

	@Override
	public boolean deleteAppointment(Integer appointmentId) {
		// TODO Auto-generated method stub
		try {
		appointmentRepository.deleteById(appointmentId);
		return true;
		}
		catch(Exception e)
		{
			log.error(e.getMessage());
			throw new UpdateFailedException("Unable to fetch record");
		}
	}

	@Override
	public List<Appointment> findByAcceptedAppointment(String acceptance) {
		// TODO Auto-generated method stub
		return appointmentRepository.findByAcceptance(acceptance);
	}

	@Override
	public appointmentDto update(int appointmentId,appointmentDto appointmentdto) {
		Appointment exisitingAppointment=appointmentRepository.findById(appointmentId).get();
		exisitingAppointment.setAcceptance(appointmentdto.getAcceptance());
		Appointment udpatedAppointment=appointmentRepository.save(exisitingAppointment);
		appointmentdto=modelmapper.map(udpatedAppointment,appointmentDto.class);
		
		return appointmentdto;
	}

	@Override
	public List<Appointment> findByAppointmentByPEmailandDate(String physicianEmail, String date, String acceptance) {
		// TODO Auto-generated method stub
		return appointmentRepository.findByEmailandDate(physicianEmail, date, acceptance);
	}

	@Override
	public Appointment saveAppointment(Appointment appointment) {
		// TODO Auto-generated method stub
		appointment.setAcceptance("Pending");
		return appointmentRepository.save(appointment);
	}

	

	
}
